// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace NanoSoftGreenMark.People
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using NanoSoftGreenMark;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using NanoSoftGreenMark.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\People\AddEmployee.razor"
using NanoSoftGreenMark.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\People\AddEmployee.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\People\AddEmployee.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/employeeadd/{Id:int}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/employeeadd")]
    public partial class AddEmployee : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 272 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\People\AddEmployee.razor"
       

    protected bool ShowConfirmation { get; set; }
    [Parameter]
    public Employee data { get; set; }
    ElementReference Model { get; set; }
    [Parameter]
    public int Id { get; set; }
    public string PageHeader { get; set; }


    public void Show()
    {
        ShowConfirmation = true;

        PageHeader = "Employee Create";
        data = new Employee();
    }
    private IEnumerable<Country> getCountry { get; set; }

    private IEnumerable<EmployeeType> getEmployeeType { get; set; }

    private IEnumerable<Location> getLocation { get; set; }


    private IEnumerable<Region> getRegion { get; set; }
    private IEnumerable<City> getCity { get; set; }
    public void Close()
    {
        ShowConfirmation = false;
        // StateHasChanged();
    }
    public async void Edit(int ID)
    {
        ShowConfirmation = true;
        PageHeader = "Employee  Edit";
        data = await Service.Employees.GetAsync(ID);
        //StateHasChanged();

    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        data = new Employee();
        var HRDResult = await Service.Countries.GetAsync(-1, 20);
        getCountry = HRDResult;
        getRegion = getCountry.FirstOrDefault()?.Divisions;
        if (getRegion == null)
        {
            getRegion = new List<Region>();
        }
        getCity = getRegion.FirstOrDefault()?.City;
        if(getCity==null)
        {
            getCity = new List<City>();
        }
        var Emptyperesult = await Service.EmployeeTypes.GetAsync(-1, 20);
        getEmployeeType = Emptyperesult;
        var Locationresult = await Service.Locations.GetAsync(-1, 20);
        getLocation = Locationresult;

        //var HREmp = await Service.Employees.GetAsync(-1, 20);
        //getEmployee = HREmp;



    }



    [Parameter]
    public EventCallback<Employee> EventAdd { get; set; }
    protected async Task OnConfirmationChange(Employee value)
    {

        if (data.Person.CityID == null || data.EmployeeTypeID == null)
        {
            //  await InvokeAsync(() => { StateHasChanged(); });
        }
        else
        {
            ShowConfirmation = true;
            await EventAdd.InvokeAsync(value);
            data = new Employee();
        }


    }
    void ChangeRegion(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {
            getRegion = getCountry.FirstOrDefault(obj => obj.ID == Cid).Divisions;

        }


    }
    void CheckGender(ChangeEventArgs e)
    {

        data.Person.Gender = (Gender) Convert.ToInt32(e.Value);
    }
    void CheckActive(ChangeEventArgs e)
    {
        if(Convert.ToBoolean(e.Value)==false)
        {
            data.Person.Status = Status.Inactive;
        }
        else
        {
            data.Person.Status = Status.Active;
        }


    }

    void ChangeCity(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {

            getCity = getRegion.FirstOrDefault(obj => obj.ID == Cid).City;

        }


    }


    private async Task OnInputFileChange(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);
            //photo = $"data:{format};base64,{Convert.ToBase64String(ms.ToArray())}";
            // Make a data URL so we can display it
            data.Person.Photo = Convert.ToBase64String(ms.ToArray());

        }
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NanoSoftGreenMark.DepandencyInjection.InterFaceModel Service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
