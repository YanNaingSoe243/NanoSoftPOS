// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace NanoSoftGreenMark.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using NanoSoftGreenMark;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\_Imports.razor"
using NanoSoftGreenMark.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\Pages\AddPurchase.razor"
using NanoSoftGreenMark.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\Pages\AddPurchase.razor"
using BlazorInputFile;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\Pages\AddPurchase.razor"
using System.IO;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/purchaseadd/{Id:int}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/purchaseadd")]
    public partial class AddPurchase : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 405 "D:\Project\NanoSoftPOS\NanoSoftGreenMark\NanoSoftGreenMark\Pages\AddPurchase.razor"
       
    protected AddProduct addCategory { get; set; }
    protected bool ShowConfirmation { get; set; }
    [Parameter]
    public Purchase data { get; set; }
    public PurchaseItem dataItem { get; set; }
    ElementReference Model { get; set; }
    [Parameter]
    public int Id { get; set; }
    public string PageHeader { get; set; }
    private IEnumerable<Supplier> GetSuppliers { get; set; }
    private IEnumerable<Discount> getDiscount { get; set; }
    private IEnumerable<Category> getCategory { get; set; } = new List<Category>();
    private IEnumerable<Product> getProduct { get; set; } = new List<Product>();
    private string name;



    bool update = false;
    public void Show()
    {
        ShowConfirmation = true;

        PageHeader = "Purchase  Create";
        data = new Purchase();
        dataItem = new PurchaseItem();

    }
    public void Close()
    {
        ShowConfirmation = false;
        StateHasChanged();
    }
    public async void Edit(int ID)
    {
        ShowConfirmation = true;
        PageHeader = "Purchase Edit";
        data = await Service.Purchases.GetAsync(ID);
        StateHasChanged();
        update = true;

    }
    bool itemupdate=false;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        data = new Purchase();
        dataItem = new PurchaseItem();

        //await Load();
        var ProductPresult = await Service.Suppliers.GetAsync(-1, 20);
        GetSuppliers = ProductPresult;
        var DiscountResult = await Service.Discounts.GetAsync(-1, 20);
        getDiscount = DiscountResult;
        var CagetoryResult = await Service.Categorys.GetAsync(-1, 20);
        getCategory = CagetoryResult;




    }

    void ChangeCategory(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {
            getProduct = getCategory.FirstOrDefault(obj => obj.ID == Cid).Products;

        }


    }
    async void  SelectProduct(ChangeEventArgs e)
    {


        if (e.Value.ToString() != "")
        {
            Product  p = getProduct.FirstOrDefault(obj => obj.Barcode == e.Value.ToString());
            if (p != null)
            {
                dataItem.ProductFK = p.ID;
                dataItem.Products = p;

                IEnumerable<PurchaseItem> getPurchaseItem = await Service.PurchaseItems.GetAsync(p.Barcode);
                dataItem.BatchNo = "B" + p.ID.ToString() + (getPurchaseItem.Count() + 1).ToString();
                //dataItem.Products = p;
            }

        }


    }
    async void SaveItem()
    {
        if (itemupdate == false)
        {
            if (dataItem.ProductFK != null)
            {
                dataItem.Products.ManufacturerPrice = dataItem.UnitPrice;
                dataItem.Stock = dataItem.Quantity;
                dataItem.Discount = getDiscount.FirstOrDefault(item => item.ID == dataItem.DiscountID);
                await Service.Products.UpInsertAsync(dataItem.Products);
                data.PurchaseProdcuts.Add(dataItem);
                dataItem = new PurchaseItem();

            }
        }
        else
        {
            if (dataItem.ProductFK != null)
            {

                dataItem = new PurchaseItem();
            }
        }
        itemupdate = false;

    }
   async  void Delete(PurchaseItem item)
    {
        if (item != null)
        {
            if (update == true)
            {
                var Result = await Service.PurchaseItems.DeleteAsync(item.ID);
            }
            else
            {
                data.PurchaseProdcuts.Remove(item);
            }
        }
    }
    async  void EditItem(PurchaseItem  item)
    {
        dataItem = item;
        itemupdate = true;
    }

    [Parameter]
    public EventCallback<Purchase> EventAdd { get; set; }
    protected async Task OnConfirmationChange(Purchase value)
    {
        ShowConfirmation = true;
        if (update == false)
        {


            if (data.SupplierID == null )
            {
                //  await InvokeAsync(() => { StateHasChanged(); });
            }
            else
            {
                ShowConfirmation = true;

                await EventAdd.InvokeAsync(value);
                data = new Purchase();
                dataItem = new PurchaseItem();

            }

        }
        else
        {

            ShowConfirmation = true;
            await EventAdd.InvokeAsync(value);
            data = new Purchase();


        }
        update = false;

    }


    protected void AddCategory()
    {
        addCategory.Show();

    }
    public async System.Threading.Tasks.Task AddData(Product data)
    {
        try
        {
            if (data != null)
            {
                await Service.Products.UpInsertAsync(data);
            }


        }
        catch (Exception Ex)
        {
            //NotificationService.Notify(NotificationSeverity.Error, $"Error", $"Unable to create new Branch!");
        }

    }

    protected async void BarcodeSelect(Product obj)
    {
        IEnumerable<PurchaseItem> puritem = await Service.PurchaseItems.GetAsync(obj.Barcode);
        dataItem.BatchNo = "B-" + obj.ID.ToString() + (puritem.Count() + 1).ToString();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NanoSoftGreenMark.DepandencyInjection.InterFaceModel Service { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
