@page "/categoryadd/{Id:int}"
@page "/cagetoryadd"
@inject IJSRuntime JSRuntime
@using NanoSoftGreenMark.Data
@inject NanoSoftGreenMark.DepandencyInjection.InterFaceModel Service

@if (ShowConfirmation)
{

<div  class="model">

    <form class="model-content animate">
        <div class="imgcontainer">
            <span @onclick="Close" class="close" title="Close Modal">&times;</span>
            @*<img src="img_avatar2.png" alt="Avatar" class="avatar">*@
            <h1>@PageHeader</h1>
            <p>Please fill in this form to create  Category .</p>
        </div>

        <div class="container">
            <label for="uname"><b>Category</b></label>
            <input type="text" placeholder="Enter Category Name" @bind-value="data.CategoryName" name="FirstName" required>
            <label for="uname"><b>Icon Name</b></label>
            <input type="text" placeholder="Enter Category Name" @bind-value="data.Icon" name="FirstName" required>
            <label for="psw"><b>Remark</b></label>
            <input type="text" placeholder="Enter Remark" @bind-value="data.Remark" name="lastName" required>


            @*<label>
            <input type="checkbox" checked="checked" name="Active"> Active
        </label>*@
        </div>

        <div class="ModelFooter">
            <button type="button" @onclick="Close" class="btn btn-danger cancelbtn">Cancel</button>
            <button type="button" @onclick="(()=>OnConfirmationChange(data))" class="btn btn-success savebtn">Save</button>
            @*<span class="psw">Forgot <a href="#">password?</a></span>*@
        </div>
    </form>
</div>
}

@code {

    protected bool ShowConfirmation { get; set; }
    [Parameter]
    public Category data { get; set; }
    ElementReference Model { get; set; }
    [Parameter]
    public int Id { get; set; }
    public string PageHeader { get; set; }
    public void Show()
    {
        ShowConfirmation = true;

        PageHeader = "Category Create";
        data = new Category();
    }
    public void Close()
    {
        ShowConfirmation = false;
        StateHasChanged();
    }
    public async void Edit(int ID)
    {
        ShowConfirmation = true;
        PageHeader = "Category Edit";
        data = await Service.Categorys.GetAsync(ID);
        StateHasChanged();

    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        data = new Category();

        //await Load();


    }



    [Parameter]
    public EventCallback<Category> EventAdd { get; set; }
    protected async Task OnConfirmationChange(Category value)
    {
        ShowConfirmation = true;
        await EventAdd.InvokeAsync(value);
        data = new Category();
    }


}
