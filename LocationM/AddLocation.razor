@page "/locationadd/{Id:int}"
@page "/locationadd"
@inject IJSRuntime JSRuntime
@using NanoSoftGreenMark.Data
@inject NanoSoftGreenMark.DepandencyInjection.InterFaceModel Service
@using BlazorInputFile
@using System.IO;

@if (ShowConfirmation)
{

    <div class="model">

        <form class="model-content animate">
          
            <div class="imgcontainer">
                <span @onclick="Close" class="close" title="Close Modal">&times;</span>
                @*<img src="img_avatar2.png" alt="Avatar" class="avatar">*@
                <h1>@PageHeader</h1>
                <p>Please fill in this form to create  Location .</p>

            </div>
            <div style="text-align:right">
                <div style="margin-right:100px;margin-bottom:10px;">
                    <img class="pic" src="data:image/jpeg;base64,@data?.ImagePath" style="height:150px;width:150px;"/>
                </div>
                <InputFile OnChange="@OnInputFileChange" multiple />
            </div>
            <div class="container">
                <label for="uname"><b>Shop Name</b></label>
                <input type="text" placeholder="Enter Shope  Name" @bind-value="data.ShopeName" name="FirstName" required>
               
                <label for="uname"><b>Latitude</b></label>
                <input type="text" placeholder="Enter Latitude" @bind-value="data.Latitude" name="FirstName" required>
                <label for="uname"><b>Longitude</b></label>
                <input type="text" placeholder="Enter Longitude Name" @bind-value="data.Longitude" name="FirstName" required>
                <label for="uname"><b>Country</b></label>
                <select required @onchange="ChangeRegion">
                    <option value="0">Select Country</option>
                    @foreach (Country obj in getCountry)
                    {
                        <option value="@obj.ID">@obj?.CountryName</option>
                    }

                </select>
                <label for="uname"><b>Region</b></label>

                <select @onchange="((e)=>ChangeCity(e))" required>
                    <option value="0">Select Region</option>
                    @foreach (Region obj in getRegion)
                    {
                        <option value="@obj.ID">@obj?.RegionName</option>
                    }
                </select>
               


                <label for="uname"><b>City</b></label>

                <select @bind="@data.CityID" required>
                    <option value="0">Select City</option>
                    @foreach (City obj in getCity)
                    {
                        <option value="@obj.ID">@obj?.CityName</option>
                    }
                </select>
                @if (data.CityID == 0 || data.CityID == null)
                {
                    <div id="v2" class="validation" style="display:block">City is  Empty </div>
                }
                else
                {
                    <div id="v2" class="validation" style="display:none">City is  Empty </div>
                }
                <label for="uname"><b>Phone</b></label>
                <input type="text" placeholder="Enter Phone Name" @bind-value="data.Phone" name="FirstName" required>
                <label for="uname"><b>Contact</b></label>
                <textarea placeholder="Enter Contact Name" @bind="data.Contact" name="FirstName" required />

            </div>

            <div class="ModelFooter">
                <button type="button" @onclick="Close" class="btn btn-danger cancelbtn">Cancel</button>
                <button type="button" @onclick="(() => OnConfirmationChange(data))" class="btn btn-success savebtn">Save</button>
                @*<span class="psw">Forgot <a href="#">password?</a></span>*@
            </div>

        </form>
    </div>

}

@code {

    protected bool ShowConfirmation { get; set; }
    [Parameter]
    public Location data { get; set; }
    ElementReference Model { get; set; }
    [Parameter]
    public int Id { get; set; }
    public string PageHeader { get; set; }
    bool RegionVelida = false;

    public void Show()
    {
        ShowConfirmation = true;

        PageHeader = "Location Create";
        data = new Location();
    }
    private IEnumerable<Country> _getCountry { get; set; }
    protected IEnumerable<Country> getCountry
    {
        get { return _getCountry; }

        set
        {
            if (!object.Equals(_getCountry, value))
            {
                _getCountry = value;

                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }


    private IEnumerable<Region> getRegion { get; set; }
    private IEnumerable<City> getCity { get; set; }
    public void Close()
    {
        ShowConfirmation = false;
       // StateHasChanged();
    }
    public async void Edit(int ID)
    {
        ShowConfirmation = true;
        PageHeader = "Location Edit";
        data = await Service.Locations.GetAsync(ID);
        //StateHasChanged();

    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        data = new Location();
        var HRDResult = await Service.Countries.GetAsync(-1, 20);
        getCountry = HRDResult;
        getRegion = getCountry.FirstOrDefault()?.Divisions;
        if(getRegion==null)
        {
            getRegion = new List<Region>();
        }
        getCity = getRegion.FirstOrDefault()?.City;
        if(getCity==null)
        {
            getCity = new List<City>();
        }



    }



    [Parameter]
    public EventCallback<Location> EventAdd { get; set; }
    protected async Task OnConfirmationChange(Location value)
    {

        if ( data.CityID == null)
        {
            StateHasChanged();
        }
        else
        {
            ShowConfirmation = true;
            await EventAdd.InvokeAsync(value);
            data = new Location();
        }


    }
    void ChangeRegion(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {
            getRegion = getCountry.FirstOrDefault(obj => obj.ID == Cid).Divisions;

        }


    }

    void ChangeCity(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {

            getCity = getRegion.FirstOrDefault(obj => obj.ID == Cid).City;

        }


    }

    private async Task OnInputFileChange(IFileListEntry[] files)
    {
        var rawFile = files.FirstOrDefault();
        if (rawFile != null)
        {
            // Load as an image file in memory
            var format = "image/jpeg";
            var imageFile = await rawFile.ToImageFileAsync(format, 640, 480);
            var ms = new MemoryStream();
            await imageFile.Data.CopyToAsync(ms);

            // Make a data URL so we can display it
            data.ImagePath =Convert.ToBase64String(ms.ToArray());

        }
    }
}