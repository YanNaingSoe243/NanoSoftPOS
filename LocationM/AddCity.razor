@page "/cityadd/{Id:int}"
@page "/cityadd"
@inject IJSRuntime JSRuntime
@using NanoSoftGreenMark.Data
@inject NanoSoftGreenMark.DepandencyInjection.InterFaceModel Service

@if (ShowConfirmation)
{

        <div class="model">

            <form class="model-content animate">
               
                    <div class="imgcontainer">
                        <span @onclick="Close" class="close" title="Close Modal">&times;</span>
                        @*<img src="img_avatar2.png" alt="Avatar" class="avatar">*@
                        <h1>@PageHeader</h1>
                        <p>Please fill in this form to create  City .</p>
                    </div>

                    <div class="container">
                        <label for="uname"><b>City Name</b></label>
                        <input type="text" placeholder="Enter City Name" @bind-value="data.CityName" name="FirstName" required>
                        <label for="uname"><b>Country</b></label>
                        <select required @onchange="ChangeRegion">
                            <option value="0">Select Country</option>
                            @foreach (Country obj in getCountry)
                            {
                                <option value="@obj.ID">@obj?.CountryName</option>
                            }

                        </select>
                        <label for="uname"><b>Region</b></label>

                        <select @bind="@data.RegionID" required>
                            <option value="0">Select Region</option>
                            @foreach (Region obj in getRegion)
                            {
                                <option value="@obj?.ID">@obj?.RegionName</option>
                            }
                        </select>
                        @if (data.RegionID == 0 || data.RegionID == null)
                        {
                            <div style="display:block" class="validation">Region is  Empty </div>
                        }
                        else
                        {
                            <div style="display:none" class="validation">Region is  Empty </div>
                        }

                    </div>

                    <div class="ModelFooter">
                        <button type="button" @onclick="Close" class="btn btn-danger cancelbtn">Cancel</button>
                        <button type="button" @onclick="(() => OnConfirmationChange(data))" class="btn btn-success savebtn">Save</button>
                        @*<span class="psw">Forgot <a href="#">password?</a></span>*@
                    </div>
               
            </form>
        </div>

}

@code {

    protected bool ShowConfirmation { get; set; }
    [Parameter]
    public City data { get; set; }
    ElementReference Model { get; set; }
    [Parameter]
    public int Id { get; set; }
    public string PageHeader { get; set; }


    public void Show()
    {
        ShowConfirmation = true;

        PageHeader = "City Create";
        data = new City();
    }
    private IEnumerable<Country> _getCountry { get; set; }
    protected IEnumerable<Country> getCountry
    {
        get { return _getCountry; }

        set
        {
            if (!object.Equals(_getCountry, value))
            {
                _getCountry = value;

                InvokeAsync(() => { StateHasChanged(); });
            }
        }
    }

    private IEnumerable<Region> getRegion { get; set; }
    public void Close()
    {
        ShowConfirmation = false;
        //StateHasChanged();
    }
    public async void Edit(int ID)
    {
        ShowConfirmation = true;
        PageHeader = "City Edit";
        data = await Service.Citys.GetAsync(ID);
        //StateHasChanged();

    }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        data = new City();
        var HRDResult = await Service.Countries.GetAsync(-1, 20);
        getCountry = HRDResult;
        getRegion = getCountry.FirstOrDefault()?.Divisions;
        if(getRegion==null)
        {
            getRegion = new List<Region>();
        }



    }



    [Parameter]
    public EventCallback<City> EventAdd { get; set; }
    protected async Task OnConfirmationChange(City value)
    {

        if (data.RegionID != 0 && data.RegionID != null)
        {
            ShowConfirmation = true;
            await EventAdd.InvokeAsync(value);
            data = new City();

        }
        else
        {
            StateHasChanged();
        }
    }
    void ChangeRegion(ChangeEventArgs e)
    {

        int Cid = Convert.ToInt32(e.Value.ToString());
        if (Cid != 0)
        {
            getRegion = getCountry.FirstOrDefault(obj => obj.ID == Cid).Divisions;

        }


    }
}