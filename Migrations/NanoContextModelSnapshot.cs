// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NanoSoftGreenMark.Data;

namespace NanoSoftGreenMark.Migrations
{
    [DbContext(typeof(NanoContext))]
    partial class NanoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("NanoSoftGreenMark.Data.Bank", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccountID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.BankList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BankID")
                        .HasColumnType("int");

                    b.Property<string>("BankStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BankID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("BankLists");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Brand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.City", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DeliveryLog", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("PositioName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("InvoiceID");

                    b.ToTable("DeliveryLogs");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Discount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DiscountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountTypeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("DiscountTypeID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DiscountProduct", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("ProductID");

                    b.ToTable("DiscountProducts");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DiscountType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DiscountTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DiscountTypes");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BasicSalary")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeTypeID")
                        .HasColumnType("int");

                    b.Property<int?>("LocationID")
                        .HasColumnType("int");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeTypeID");

                    b.HasIndex("LocationID");

                    b.HasIndex("PersonID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.EmployeeType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployeeTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EmployeeTypes");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.GiftCard", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GiftCardName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("GiftCards");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Invoice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerFK")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<decimal>("DueAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("GiftCardID")
                        .HasColumnType("int");

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SellDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShipAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShipPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CustomerFK");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("GiftCardID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.InvoiceItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductFK")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ProductFK");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Messages", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("MailStatus")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("ContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Education")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NRC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortBiography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AlertQty")
                        .HasColumnType("int");

                    b.Property<string>("Barcode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BrandID")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturerPrice")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyID")
                        .HasColumnType("int");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("PropertyID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.ProductProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Properties")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("productProperties");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("GrandTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("NetTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("int");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.PurchaseItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BatchNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscountID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GiftCardID")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int?>("ProductFK")
                        .HasColumnType("int");

                    b.Property<int?>("PurchaseFK")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DiscountID");

                    b.HasIndex("GiftCardID");

                    b.HasIndex("ProductFK");

                    b.HasIndex("PurchaseFK");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Region", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountryFK")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CountryFK");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Register", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConfirmPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PersonID")
                        .HasColumnType("int");

                    b.Property<int?>("RoleID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("PersonID");

                    b.HasIndex("RoleID");

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.BankList", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Bank", "Banks")
                        .WithMany("BankList")
                        .HasForeignKey("BankID");

                    b.HasOne("NanoSoftGreenMark.Data.Invoice", "Invoice")
                        .WithMany("BankList")
                        .HasForeignKey("InvoiceID");

                    b.Navigation("Banks");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.City", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Region", "Region")
                        .WithMany("City")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Customer", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Person", "Person")
                        .WithMany("Customers")
                        .HasForeignKey("PersonID");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Delivery", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DeliveryLog", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Employee", "Employees")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("EmployeeID");

                    b.HasOne("NanoSoftGreenMark.Data.Invoice", "Invoices")
                        .WithMany("DeliveryLogs")
                        .HasForeignKey("InvoiceID");

                    b.Navigation("Employees");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Discount", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.DiscountType", "DiscountType")
                        .WithMany("Discounts")
                        .HasForeignKey("DiscountTypeID");

                    b.Navigation("DiscountType");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DiscountProduct", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Discount", "Discount")
                        .WithMany("DiscountProducts")
                        .HasForeignKey("DiscountID");

                    b.HasOne("NanoSoftGreenMark.Data.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductID");

                    b.Navigation("Discount");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Employee", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeID");

                    b.HasOne("NanoSoftGreenMark.Data.Location", "Location")
                        .WithMany("Employees")
                        .HasForeignKey("LocationID");

                    b.HasOne("NanoSoftGreenMark.Data.Person", "Person")
                        .WithMany("Employees")
                        .HasForeignKey("PersonID");

                    b.Navigation("EmployeeType");

                    b.Navigation("Location");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Invoice", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.City", "City")
                        .WithMany("Invoices")
                        .HasForeignKey("CityID");

                    b.HasOne("NanoSoftGreenMark.Data.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerFK");

                    b.HasOne("NanoSoftGreenMark.Data.Delivery", "Delivery")
                        .WithMany("Invoices")
                        .HasForeignKey("DeliveryID");

                    b.HasOne("NanoSoftGreenMark.Data.GiftCard", null)
                        .WithMany("Invoices")
                        .HasForeignKey("GiftCardID");

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.InvoiceItem", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Discount", "Discount")
                        .WithMany("Invoices")
                        .HasForeignKey("DiscountID");

                    b.HasOne("NanoSoftGreenMark.Data.Invoice", "Invoice")
                        .WithMany("purchaseItems")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanoSoftGreenMark.Data.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductFK");

                    b.Navigation("Discount");

                    b.Navigation("Invoice");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Location", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Messages", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID");

                    b.HasOne("NanoSoftGreenMark.Data.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Person", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Product", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandID");

                    b.HasOne("NanoSoftGreenMark.Data.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID");

                    b.HasOne("NanoSoftGreenMark.Data.ProductProperty", "Property")
                        .WithMany("Products")
                        .HasForeignKey("PropertyID");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Purchase", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Supplier", "Supplier")
                        .WithMany("Purchases")
                        .HasForeignKey("SupplierID");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.PurchaseItem", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountID");

                    b.HasOne("NanoSoftGreenMark.Data.GiftCard", "GiftCard")
                        .WithMany()
                        .HasForeignKey("GiftCardID");

                    b.HasOne("NanoSoftGreenMark.Data.Product", "Products")
                        .WithMany()
                        .HasForeignKey("ProductFK");

                    b.HasOne("NanoSoftGreenMark.Data.Purchase", "Purchase")
                        .WithMany("PurchaseProdcuts")
                        .HasForeignKey("PurchaseFK");

                    b.Navigation("Discount");

                    b.Navigation("GiftCard");

                    b.Navigation("Products");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Region", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Country", "Country")
                        .WithMany("Divisions")
                        .HasForeignKey("CountryFK");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Register", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID");

                    b.HasOne("NanoSoftGreenMark.Data.Role", "Role")
                        .WithMany("Registers")
                        .HasForeignKey("RoleID");

                    b.Navigation("Person");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Supplier", b =>
                {
                    b.HasOne("NanoSoftGreenMark.Data.City", "City")
                        .WithMany("Suppliers")
                        .HasForeignKey("CityID");

                    b.Navigation("City");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Bank", b =>
                {
                    b.Navigation("BankList");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.City", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Invoices");

                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Country", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Delivery", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Discount", b =>
                {
                    b.Navigation("DiscountProducts");

                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.DiscountType", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Employee", b =>
                {
                    b.Navigation("DeliveryLogs");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.GiftCard", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Invoice", b =>
                {
                    b.Navigation("BankList");

                    b.Navigation("DeliveryLogs");

                    b.Navigation("purchaseItems");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Location", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Person", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.ProductProperty", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Purchase", b =>
                {
                    b.Navigation("PurchaseProdcuts");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Region", b =>
                {
                    b.Navigation("City");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Role", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("NanoSoftGreenMark.Data.Supplier", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
